{"dependencies":[{"name":"/home/ankil/Documents/multisensorposeestimation/tfjs-models/posenet/demos/package.json","includedInParent":true,"mtime":1535211551421},{"name":"/home/ankil/Documents/multisensorposeestimation/tfjs-models/posenet/demos/.babelrc","includedInParent":true,"mtime":1535211551405},{"name":"/home/ankil/Documents/multisensorposeestimation/tfjs-models/posenet/demos/node_modules/@tensorflow-models/posenet/package.json","includedInParent":true,"mtime":1535211792045},{"name":"./maxHeap","loc":{"line":1,"column":24}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.buildPartWithScoreQueue = buildPartWithScoreQueue;\n\nvar _maxHeap = require('./maxHeap');\n\nfunction scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, localMaximumRadius, scores) {\n    var _a = scores.shape,\n        height = _a[0],\n        width = _a[1];\n    var localMaximum = true;\n    var yStart = Math.max(heatmapY - localMaximumRadius, 0);\n    var yEnd = Math.min(heatmapY + localMaximumRadius + 1, height);\n    for (var yCurrent = yStart; yCurrent < yEnd; ++yCurrent) {\n        var xStart = Math.max(heatmapX - localMaximumRadius, 0);\n        var xEnd = Math.min(heatmapX + localMaximumRadius + 1, width);\n        for (var xCurrent = xStart; xCurrent < xEnd; ++xCurrent) {\n            if (scores.get(yCurrent, xCurrent, keypointId) > score) {\n                localMaximum = false;\n                break;\n            }\n        }\n        if (!localMaximum) {\n            break;\n        }\n    }\n    return localMaximum;\n}\nfunction buildPartWithScoreQueue(scoreThreshold, localMaximumRadius, scores) {\n    var _a = scores.shape,\n        height = _a[0],\n        width = _a[1],\n        numKeypoints = _a[2];\n    var queue = new _maxHeap.MaxHeap(height * width * numKeypoints, function (_a) {\n        var score = _a.score;\n        return score;\n    });\n    for (var heatmapY = 0; heatmapY < height; ++heatmapY) {\n        for (var heatmapX = 0; heatmapX < width; ++heatmapX) {\n            for (var keypointId = 0; keypointId < numKeypoints; ++keypointId) {\n                var score = scores.get(heatmapY, heatmapX, keypointId);\n                if (score < scoreThreshold) {\n                    continue;\n                }\n                if (scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, localMaximumRadius, scores)) {\n                    queue.enqueue({ score: score, part: { heatmapY: heatmapY, heatmapX: heatmapX, id: keypointId } });\n                }\n            }\n        }\n    }\n    return queue;\n}\n//# sourceMappingURL=buildPartWithScoreQueue.js.map"},"hash":"aa7aa27a5ba206a08c026edce12bed98","cacheData":{"env":{}}}